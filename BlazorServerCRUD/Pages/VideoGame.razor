@page "/videogame"
@page "/videogame/{id:int}"
@inject IGameService GameService

@if (Id == null)
{
    <h3>Create a new Video Game</h3>
}
else
{
    <h3>Edit @game.Name</h3>
}

<EditForm Model="game" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="game.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="developer">Developer</label>
        <InputText id="developer" @bind-Value="game.Developer" class="form-control"></InputText>
    </div>
    <div>
        <label for="release">Release</label>
        <InputDate id="release" @bind-Value="game.Release" class="form-control"></InputDate>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="(() => deleteConfirmation?.Show())">Delete Game</button>
    }
</EditForm>
<DeleteConfirmation @ref=deleteConfirmation Content="削除します。よろしいですか？" CallBack="DeleteExecute"></DeleteConfirmation>

@code {
    [Parameter]
    public int? Id { get; set; }

    private string btnText = string.Empty;

    private DeleteConfirmation? deleteConfirmation;

    Game game = new Game();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Game" : "Update Game";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            game = await GameService.GetSingleGame(Id.Value);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await GameService.CreateGame(game);
        }
        else
        {
            await GameService.UpdateGame(game, Id.Value);
        }
    }

    async Task DeleteExecute(bool result)
    {
        if (result)
        {
            await GameService.DeleteGame(game.Id);
        }
    }
}
